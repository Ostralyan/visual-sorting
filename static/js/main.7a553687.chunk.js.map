{"version":3,"sources":["serviceWorker.js","utility/ArrayGenerator.ts","BubbleSort/BubbleSort.tsx","SelectionSort/SelectionSort.tsx","BogoSort/BogoSort.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ArrayGenerator","length","minValue","arguments","undefined","maxValue","resultArray","i","randomNumber","Math","floor","random","push","arrSize","BubbleSort","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listOfNumbers","create","currentCursor","currentIteration","nextPass","toConsumableArray","nextCursor","nextIteration","setState","table","cellClasses","react_default","a","createElement","className","join","key","_this2","onClick","nextBubble","createTable","React","Component","SelectionSort","randomArray","currentMax","currentMaxIndex","nextMax","nextMaxIndex","lastNonSortedIndex","nextSelection","BogoSort","arr","isSorted","nextRandomArray","App","BubbleSort_BubbleSort_BubbleSort","SelectionSort_SelectionSort","BogoSort_BogoSort","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a553687.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default class ArrayGenerator {\n  public static create(length: number, minValue: number = 0, maxValue: number = 100) {\n    const resultArray = [];\n    for(let i = 0; i < length; i++) {\n      const randomNumber = Math.floor((Math.random() * maxValue - minValue)) + minValue;\n      resultArray.push(randomNumber);\n    }\n    return resultArray;\n  }\n}","import React from 'react';\nimport ArrayGenerator from '../utility/ArrayGenerator';\nimport './BubbleSort.css';\n\ninterface Props {}\n\ninterface State {\n  listOfNumbers: number[];\n  currentCursor: number;\n  currentIteration: number;\n}\n\nconst arrSize = 10;\n\nexport default class BubbleSort extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      listOfNumbers: ArrayGenerator.create(arrSize),\n      currentCursor: 0,\n      currentIteration: 0\n    }\n  }\n\n  private nextBubble(): void {\n    if (this.state.currentIteration > this.state.listOfNumbers.length - 1) {\n      return;\n    }\n    const nextPass = [...this.state.listOfNumbers];\n    \n    if (nextPass[this.state.currentCursor] > nextPass[this.state.currentCursor + 1]) {\n      nextPass[this.state.currentCursor] = nextPass[this.state.currentCursor] ^ nextPass[this.state.currentCursor + 1];\n      nextPass[this.state.currentCursor + 1] = nextPass[this.state.currentCursor + 1] ^ nextPass[this.state.currentCursor];\n      nextPass[this.state.currentCursor] = nextPass[this.state.currentCursor] ^ nextPass[this.state.currentCursor + 1];   \n    }\n\n    let nextCursor = 0;\n    let nextIteration = this.state.currentIteration;\n\n    if (this.state.currentCursor < arrSize - this.state.currentIteration - 2) {\n      nextCursor = this.state.currentCursor + 1;\n    } else {\n      nextCursor = 0;\n      nextIteration++;\n    }\n\n    this.setState({\n      listOfNumbers: nextPass,\n      currentCursor: nextCursor,\n      currentIteration: nextIteration,\n    });\n  }\n\n  private createTable(): JSX.Element[] {\n    let table: JSX.Element[] = [];\n\n    for(let i = 0; i < this.state.listOfNumbers.length; i++) {\n      const cellClasses = [\"row-cell\"];\n\n      if (i == this.state.currentCursor || i == this.state.currentCursor -1) {\n        cellClasses.push('highlight');\n      }\n\n      if (this.state.currentIteration > this.state.listOfNumbers.length - 2) {\n        cellClasses.push('sorted');\n      }\n    \n      table.push(\n        <div className={cellClasses.join(' ')} key={i}>\n            {this.state.listOfNumbers[i]}\n        </div>\n      );\n    }\n\n    return table;\n  }\n\n  public render(): React.ReactNode {\n    return(\n      <div onClick={() => this.nextBubble()}>\n        <h1>\n          Bubble Sort\n        </h1>\n        {this.createTable()}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ArrayGenerator from '../utility/ArrayGenerator';\n\ninterface Props {\n\n}\n\ninterface State {\n  listOfNumbers: number[]; \n  currentCursor: number;\n  currentIteration: number;\n  currentMax: number;\n  currentMaxIndex: number;\n}\n\nconst arrSize = 10;\n\nexport default class SelectionSort extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    const randomArray = ArrayGenerator.create(arrSize)\n    this.state = {\n      listOfNumbers: randomArray,\n      currentCursor: 0,\n      currentIteration: 0,\n      currentMax: randomArray[0],\n      currentMaxIndex: 0\n    }\n  }\n\n  private createTable(): JSX.Element[] {\n    let table: JSX.Element[] = [];\n\n    for(let i = 0; i < this.state.listOfNumbers.length; i++) {\n      const cellClasses = [\"row-cell\"];\n    \n      table.push(\n        <div className={cellClasses.join(' ')} key={i}>\n            {this.state.listOfNumbers[i]}\n        </div>\n      );\n    }\n\n    return table;\n  }\n\n  public nextSelection(): void {\n    const nextPass = [...this.state.listOfNumbers];\n    let nextMax = this.state.currentMax;\n    let nextMaxIndex = this.state.currentMaxIndex;\n\n    if (this.state.listOfNumbers[this.state.currentCursor] > this.state.currentMax) {\n      nextMax = this.state.listOfNumbers[this.state.currentCursor];\n      nextMaxIndex = this.state.currentCursor;\n    }\n\n    let nextCursor = 0;\n    let nextIteration = this.state.currentIteration;\n\n    if (this.state.currentCursor < arrSize - this.state.currentIteration) {\n      nextCursor = this.state.currentCursor + 1;\n    } else {\n      const lastNonSortedIndex = arrSize - this.state.currentIteration - 1;\n      nextCursor = 0;\n      nextIteration++;\n      nextPass[nextMaxIndex] = nextPass[nextMaxIndex] ^ nextPass[lastNonSortedIndex];\n      nextPass[lastNonSortedIndex] = nextPass[lastNonSortedIndex] ^ nextPass[nextMaxIndex];\n      nextPass[nextMaxIndex] = nextPass[nextMaxIndex] ^ nextPass[lastNonSortedIndex];\n    }\n\n    this.setState({\n      listOfNumbers: nextPass,\n      currentCursor: nextCursor,\n      currentIteration: nextIteration,\n      currentMax: nextMax\n    });\n  }\n\n  public render(): React.ReactNode {\n    return(\n      <div onClick={() => this.nextSelection()}>\n        <h1>\n          Selection Sort\n        </h1>\n        {this.createTable()}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ArrayGenerator from '../utility/ArrayGenerator';\n\ninterface State {\n  listOfNumbers: number[];\n  isSorted: boolean;\n};\ninterface Props {};\n\nconst arrSize = 4;\n\nexport default class BogoSort extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const arr = ArrayGenerator.create(arrSize);\n    this.state = {\n      listOfNumbers: arr,\n      isSorted: this.isSorted(arr),\n    }\n  }\n\n  public isSorted(arr: number[]): boolean {\n    for(let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        return false\n      }\n    }\n\n    return true;\n  }\n\n  public nextRandomArray(): void {\n    if (this.state.isSorted) return;\n\n    const listOfNumbers = ArrayGenerator.create(arrSize);\n    const isSorted = this.isSorted(listOfNumbers)\n    const state = {\n      listOfNumbers,\n      isSorted\n    }\n    this.setState(state);\n  }\n\n  private createTable(): JSX.Element[] {\n    let table: JSX.Element[] = [];\n\n    for(let i = 0; i < this.state.listOfNumbers.length; i++) {\n      const cellClasses = [\"row-cell\"];\n    \n      if (this.state.isSorted) {\n        cellClasses.push(\"sorted\");\n      }\n\n      table.push(\n        <div className={cellClasses.join(' ')} key={i}>\n            {this.state.listOfNumbers[i]}\n        </div>\n      );\n    }\n\n    return table;\n  }\n\n  public render(): React.ReactNode {\n    return(\n      <div onClick={() => this.nextRandomArray()}>\n        <h1>\n          Bogo Sort\n        </h1>\n        {this.createTable()}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport BubbleSort from './BubbleSort/BubbleSort';\nimport SelectionSort from './SelectionSort/SelectionSort';\nimport BogoSort from './BogoSort/BogoSort';\nexport default class App extends React.Component {\n  render() {\n    return(\n      <div>\n        <BubbleSort />\n        <SelectionSort />\n\n        <BogoSort />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}